{
    "course_info": {
        "lesson_number": "4",
        "chapter": "5",
        "name": " 集合"
    },
    "all_block": [
        {
            "type": "text",
            "content": "集合的意思就是數學上的集合，用於包含無序且不重複的元素，與有序性的串列、元組等不同，集合無法透過索引來取得元素，而元素只能是不可變的型態，例如元組、數字、字串等。"
        },
        {
            "type": "text",
            "content": "集合主要用於移除重複的元素、測試成員關係、集合運算。"
        },
        {
            "type": "subtitle",
            "content": "<h5>建立集合</h5>"
        },
        {
            "type": "text",
            "content": "使用大括號或 set() 創建集合， set() 會將其他容器轉換成集合後返回。"
        },
        {
            "type": "code",
            "content": "```\n變數名稱 = {元素1, 元素2...}\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> My_set1 = {1, 2, 2, 3, 3, 4}\n>>> My_set1 #重複的元素會被剔除\n{1, 2, 3, 4}\n>>> My_set2 = {'a', 'b', 'c', 'd'}\n>>> My_set2\n{'d', 'b', 'c', 'a'}\n```"
        },
        {
            "type": "text",
            "content": "因為 {} 代表空字典，因此創建空集合時需使用set()。"
        },
        {
            "type": "code",
            "content": "```\n變數名稱 = set(容器)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> My_set1 = set() #返回一個空集合\n>>> My_set1\nset()\n>>> My_set2 = set('pretty') #將字串轉換成集合\n>>> My_set2 #重複的元素't'會被剔除\n{'r', 'p', 'e', 'y', 't'}\n>>> My_set3 = set(['物理','化學','微積分','國文']) #將串列轉換成集合\n>>> My_set3\n{'化學', '微積分', '物理', '國文'}\n```"
        },
        {
            "type": "text",
            "content": "因為集合是無序的所以沒有辦法通過索引取得指定元素，只能增添與刪除元素。"
        },
        {
            "type": "code",
            "content": "```python=\n>>> My_set = {0, 1, 2, 3, 4, 5}\n>>> My_set[0]\n'set' object does not support indexing\n>>> #集合型態不支持索引\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>添加元素進集合</h5>"
        },
        {
            "type": "text",
            "content": "使用 add() 將一個元素加入集合。"
        },
        {
            "type": "code",
            "content": "```\n集合.add(元素)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> My_set = set()\n>>> My_set.add(33)\n>>> My_set.add('abc')\n>>> My_set\n{33, 'abc'}\n```"
        },
        {
            "type": "text",
            "content": "使用 update() 可以將一個容器內的所有元素加入集合。"
        },
        {
            "type": "code",
            "content": "```\n集合.update(容器)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> My_set = set()\n>>> My_set.update([1, 2])\n>>> My_set.update({3: 0, 4: 0}) #只會加入字典的鍵\n>>> My_set.update((5,6))\n>>> My_set.update({7,8})\n>>> My_set\n{1, 2, 3, 4, 5, 6, 7, 8}\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>刪除集合中的元素</h5>"
        },
        {
            "type": "text",
            "content": "使用 remove() 刪除集合中的元素。"
        },
        {
            "type": "code",
            "content": "```\n集合.remove(元素)。\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> My_set = {1, 2, 3, 4, 5}\n>>> My_set\n{1, 2, 3, 4, 5}\n>>> My_set.remove(1)\n>>> My_set\n{2, 3, 4, 5}\n```"
        },
        {
            "type": "text",
            "content": "使用 clear() 清空集合。"
        },
        {
            "type": "code",
            "content": "```\n集合.clear()\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> My_set.clear()\n>>> My_set\nset()\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>測試成員關係</h5>"
        },
        {
            "type": "text",
            "content": "<h6>子集合</h6>"
        },
        {
            "type": "text",
            "content": "當一個集合只包含另一個集合的元素，就稱此集合為另一個集合的子集合。"
        },
        {
            "type": "code",
            "content": "```\na.issubset(b)\na <= b\n```"
        },
        {
            "type": "text",
            "content": "判斷a集合是否為b集合的子集合，也可以使用<=運算子："
        },
        {
            "type": "code",
            "content": "```python=\n>>> a = {'a', 'b', 'c'}\n>>> b = {'a', 'b', 'c', 'd', 'e'}\n>>> a.issubset(b) #a只包含b的元素\nTrue\n>>> a <= b\nTrue\n>>> c = {'a', 'b', 'c', 'f'}\n>>> c <= b #c不是只包含b的元素\nFalse\n```"
        },
        {
            "type": "text",
            "content": "<h6>超集合</h6>"
        },
        {
            "type": "text",
            "content": "當一個集合具有另一個集合的所有元素，就稱此集合為另一個集合的超集合。"
        },
        {
            "type": "code",
            "content": "```\na.issuperset(b) \na >= b \n```"
        },
        {
            "type": "text",
            "content": "判斷a集合是否為b集合的超集合，也可以使用>=運算子："
        },
        {
            "type": "code",
            "content": "```python=\n>>> a = {'a', 'b', 'c'}\n>>> b = {'a', 'b'}\n>>> a.issuperset(b) #a具有b的所有元素\nTrue\n>>> a >= b\nTrue\n>>> c = {'a', 'b', 'd'}\n>>> a >= c #a不具有c的所有元素\nFalse\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>集合運算</h5>"
        },
        {
            "type": "text",
            "content": "假設a、b是兩個活動的參加人名單："
        },
        {
            "type": "code",
            "content": "```python=\n>>> a = {'Adam','Dwan','Jack','Jenny','Loli','Mary','Tommy'}\n>>> b = {'Adam','Cherry','David','Iris','Jack','Jenny','Mary'}\n```"
        },
        {
            "type": "text",
            "content": "<h6>聯集</h6>"
        },
        {
            "type": "text",
            "content": "a.union(b) 會返回一個集合，其具有a集合與b集合所有的元素，也可以使用 | 運算子。"
        },
        {
            "type": "code",
            "content": "```\na.union(b)\na | b\n```"
        },
        {
            "type": "text",
            "content": "我們可以找出所有參加活動的人，也就是a與b的聯集："
        },
        {
            "type": "code",
            "content": "```python=\n>>> a.union(b)\n{'David', 'Jack', 'Loli', 'Mary', 'Iris', 'Adam', 'Cherry', 'Jenny', 'Dwan', 'Tommy'}\n>>> a | b\n{'David', 'Jack', 'Loli', 'Mary', 'Iris', 'Adam', 'Cherry', 'Jenny', 'Dwan', 'Tommy'} \n```"
        },
        {
            "type": "text",
            "content": "<h6>交集</h6>"
        },
        {
            "type": "text",
            "content": "a.intersection(b) 會返回一個集合，其具有a集合與b集合共有的元素，也可以使用 & 運算子。"
        },
        {
            "type": "code",
            "content": "```\na.intersection(b)\na & b\n```"
        },
        {
            "type": "text",
            "content": "我們可以找出兩個活動都有參加的人，也就是a與b的交集："
        },
        {
            "type": "code",
            "content": "```python=\n>>> a.intersection(b)\n{'Adam', 'Jack', 'Jenny', 'Mary'}\n>>> a & b\n{'Adam', 'Jack', 'Jenny', 'Mary'}\n```"
        },
        {
            "type": "text",
            "content": "<h6>差集</h6>"
        },
        {
            "type": "text",
            "content": "a.difference(b)會返回一個集合，其具有a集合有但b集合沒有的元素，也可以使用 - 運算子。"
        },
        {
            "type": "code",
            "content": "```\na.difference(b)\na - b\n```"
        },
        {
            "type": "text",
            "content": "我們可以找出只參加a活動的人，也就是a與b的差集："
        },
        {
            "type": "code",
            "content": "```python=\n>>> a.difference(b)\n{'Dwan', 'Loli', 'Tommy'}\n>>> a - b\n{'Dwan', 'Loli', 'Tommy'}\n```"
        },
        {
            "type": "text",
            "content": "我們可以找出只參加b活動的人，也就是b與a的差集："
        },
        {
            "type": "code",
            "content": "```python=\n>>> b.difference(a)\n{'Iris', 'David', 'Cherry'}\n>>> b - a\n{'Iris', 'David', 'Cherry'}\n```"
        },
        {
            "type": "text",
            "content": "<h6>對稱差集</h6>"
        },
        {
            "type": "text",
            "content": "a.symmetric_difference(b) 會返回一個集合，其具有a集合有但b集合沒有的元素和b集合有但a集合沒有的元素，也可以使用 ^ 運算子。"
        },
        {
            "type": "code",
            "content": "```\na.symmetric_difference(b)\na ^ b\n```"
        },
        {
            "type": "text",
            "content": "我們可以找出只參加一個活動的人，也就是a與b的對稱差集："
        },
        {
            "type": "code",
            "content": "```python=\n>>> a.symmetric_difference(b)\n{'David', 'Loli', 'Iris', 'Cherry', 'Dwan', 'Tommy'}\n>>> a ^ b\n{'David', 'Loli', 'Iris', 'Cherry', 'Dwan', 'Tommy'}\n>>> (a - b) | (b - a) #a與b和b與a的差集的聯集\n{'David', 'Loli', 'Iris', 'Cherry', 'Dwan', 'Tommy'}\n```"
        },
        {
            "type": "text",
            "content": "其他參見<a href=http://easycoding.nutc.edu.tw/wiki/5/5>文件：集合的操作&函式</a>"
        }
    ]
}