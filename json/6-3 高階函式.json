{
    "course_info": {
        "lesson_number": "6",
        "chapter": "3",
        "name": "高階函式"
    },
    "course_block": [
        {
            "type": "text",
            "content": "###### tags: `easy coding`"
        },
        {
            "type": "text",
            "content": "##### 函式變數(function variable)"
        },
        {
            "type": "text",
            "content": "在python中函式也可以當作變數來處理。"
        },
        {
            "type": "code",
            "content": "```python=\n>>> def hello():\n...     print(\"easy coding\")\n>>> a = hello\n>>> a()\neasy coding\n```"
        },
        {
            "type": "text",
            "content": "既然函式也是一個變數，那我們當然也可以把它傳入其他函式中當作參數。"
        },
        {
            "type": "text",
            "content": "底下我們就來做一個會把list內所有東西都丟進函式裡執行的函式。"
        },
        {
            "type": "code",
            "content": "```python=\ndef my_map(iter, func):\n    result = []\n    for i in iter:\n        result.append(func(i))\n        \n    return result\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> my_map([2,3,5], print)\n2\n3\n5\n[None, None, None]\n```"
        },
        {
            "type": "text",
            "content": "上面的例子只是一個普通的對所有元素執行的函式，但是我們也可以做一個接受函式後回傳其他函式的函式。"
        },
        {
            "type": "text",
            "content": "下面我們來做一個會自動輸入我們需要的參數的函式。"
        },
        {
            "type": "code",
            "content": "```python=\ndef pack(func, *args):\n    \n    def result():\n        return func(*args)\n    \n    return result\n```"
        },
        {
            "type": "text",
            "content": "接著我們用產生亂數的函式來看看剛剛的函式怎麼運作的。"
        },
        {
            "type": "text",
            "content": "註1:from跟import會在第七章教到。"
        },
        {
            "type": "text",
            "content": "註2:randint(a, b)的用法是接受兩個參數a、b後產生從a到b的整數亂數。"
        },
        {
            "type": "code",
            "content": "```python=\n>>> from random import randint\n>>> a = pack(randint, 0, 100)\n>>> a()\n84\n>>> a()\n15\n```"
        },
        {
            "type": "text",
            "content": "##### 裝飾器(decorator)"
        },
        {
            "type": "text",
            "content": "上面提到的以函式當作參數並且回傳一個新的函式的函式在python中還有一個名字叫做裝飾器，得名於可以拿來裝飾其他函式，裝飾器可以用以下語法實現："
        },
        {
            "type": "code",
            "content": "```\n@裝飾器名稱(裝飾器的參數們)\ndef 函式名稱(參數們):\n    程式碼們\n```"
        },
        {
            "type": "text",
            "content": "下面我們來做一個檢查參數輸入是不是整數的裝飾器來裝飾檢查質數的函式。"
        },
        {
            "type": "code",
            "content": "```python=\ndef int_required(func):\n    \n    def result(n):\n        if isinstance(n, int):\n            return \"請輸入整數\"\n        \n        return func(n)\n    return result\n@int_required\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n```"
        },
        {
            "type": "text",
            "content": "執行結果："
        },
        {
            "type": "code",
            "content": "```python=\n>>> is_prime(2)\nTrue\n>>> is_prime(2.3)\n'請輸入整數'\n>>> is_prime(\"2\")\n'請輸入整數'\n```"
        },
        {
            "type": "text",
            "content": "上面的例子不用裝飾器的寫法也可以這樣寫"
        },
        {
            "type": "code",
            "content": "```python=\ndef int_required(func):\n    \n    def result(n):\n        if not isinstance(n, int):\n            return \"請輸入整數\"\n        \n        return func(n)\n    return result\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\nis_prime = int_required(is_prime)\n```"
        }
    ],
    "answer_block": [
        {
            "type": "text",
            "content": "執行結果："
        },
        {
            "type": "text",
            "content": ":::"
        },
        {
            "type": "code",
            "content": "```python=\n>>> for i in range(10):\n... \tis_prime(i)\n    \narg:(0,),output:False\narg:(1,),output:False\narg:(2,),output:True\narg:(3,),output:True\narg:(4,),output:False\narg:(5,),output:True\narg:(6,),output:False\narg:(7,),output:True\narg:(8,),output:False\narg:(9,),output:False\n```"
        },
        {
            "type": "text",
            "content": ":::info"
        },
        {
            "type": "text",
            "content": "完成以下程式碼使輸出結果與題目相同："
        }
    ]
}