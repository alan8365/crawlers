{
    "course_info": {
        "lesson_number": "2",
        "chapter": "2",
        "name": "格式化輸出"
    },
    "course_block": [
        {
            "type": "text",
            "content": "若我們想要控制資料的呈現方式，而不只是使用分隔字元或結尾字元，我們可以使用三種方法格式化資料：%格式化字元、字串的format方法、format函式。"
        },
        {
            "type": "title",
            "content": "<h4>%格式化字元</h4>"
        },
        {
            "type": "code",
            "content": "```\n'%資料型態' % (資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> n1, n2 = 100, 120\n>>> '今天的零用錢有%d元，明天的零用錢有%d元' % (n1, n2)\n'今天的零用錢有100元，明天的零用錢有120元'\n```"
        },
        {
            "type": "text",
            "content": "n1和n2是變數，值為100與120，\"今天的零用錢有%d元，明天的零用錢有%d元\"就是字串，%後面的d代表變數的資料型態，而變數會按照順序輸出在%標示的位置上。"
        },
        {
            "type": "text",
            "content": "%d是整數型態，%f是浮點數型態，%s是字串型態，其他參見<a href='http://easycoding.nutc.edu.tw/wiki/2/2'>文件：%格式化字元</a>。"
        },
        {
            "type": "text",
            "content": "因為%用作格式化字元，所以要在字串中輸出%需輸入%%："
        },
        {
            "type": "code",
            "content": "```python=\n>>> '進度%d%%完成' % (100)\n'進度100%完成'\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>控制資料的型態</h5>"
        },
        {
            "type": "text",
            "content": "我們可以改變輸出資料的型態，例如n1與n2原本是整數型態，我們以浮點數型態輸出："
        },
        {
            "type": "code",
            "content": "```python=\n>>> #承上例\n>>> '今天的零用錢有%f元，明天的零用錢有%f元' % (n1, n2)\n'今天的零用錢有100.000000元，明天的零用錢有120.000000元'\n```"
        },
        {
            "type": "text",
            "content": "使用浮點數型態時，浮點數的小數位數默認輸出至第6位，小數位數是指小數點後有幾個數字。"
        },
        {
            "type": "subtitle",
            "content": "<h5>控制浮點數的小數位數</h5>"
        },
        {
            "type": "text",
            "content": "要控制小數位數可以在%字元後加上小數點，在小數點後填入位數，若小數點後沒有填入位數則輸出的小數位數為0。"
        },
        {
            "type": "code",
            "content": "```\n'%.小數位數f' % (資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> a = 1.23456 #原本的小數位數為5\n>>> '%.1f, %.2f, %.3f' % (a, a, a)\n'1.2, 1.23, 1.235'\n>>> b = 123 #原本的小數位數為0\n>>> '%.1f, %.2f, %.3f' % (b, b, b)\n'123.0, 123.00, 123.000'\n```"
        },
        {
            "type": "text",
            "content": "若設定小數位數比原本的小數位數少，會四捨五入後輸出，若比原本的小數位數多則會填入0。"
        },
        {
            "type": "subtitle",
            "content": "<h5>控制資料的欄寬</h5>"
        },
        {
            "type": "code",
            "content": "```\n'%欄寬資料型態' % (資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> '%5d' % (1)\n'    1'\n>>> '%5d' % (12)\n'   12'\n>>> '%5d' % (123)\n'  123'\n>>> '%5d' % (1234)\n' 1234'\n>>> '%5d' % (12345)\n'12345'\n```"
        },
        {
            "type": "title",
            "content": "<h4>字串.format()方法</h4>"
        },
        {
            "type": "code",
            "content": "```\n'{}'.format(資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> n1, n2 = 100, 120\n>>> '今天的零用錢有{}元，明天的零用錢有{}元'.format(n1, n2)\n'今天的零用錢有100元，明天的零用錢有120元'\n```"
        },
        {
            "type": "text",
            "content": "使用此方法不需輸入資料型態，字串中的大括號會被替換成資料，未包含在大括號中的內容都會被視為普通文字，它將不加改變地複製到輸出中。"
        },
        {
            "type": "text",
            "content": "字串.format()可以控制資料輸出的位置，在括號中填入數字，數字代表第幾個資料，0代表第一個，1代表第二個，以此類推："
        },
        {
            "type": "code",
            "content": "```\n'{指定位置}'.format(資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> n1, n2, n3 = 10, 20, 30\n>>> '{0} {1} {2}'.format(n1, n2, n3)\n'10 20 30'\n>>> '{2} {0} {1}'.format(n1, n2, n3)\n'30 10 20'\n```"
        },
        {
            "type": "text",
            "content": "因為大括號代表資料輸出的位置，所以要在字串中輸出{}，需輸入{{和}}："
        },
        {
            "type": "code",
            "content": "```python=\n>>> '{{}}'.format()\n'{}'\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>控制資料的型態</h5>"
        },
        {
            "type": "text",
            "content": "字串.format()也可以改變輸出資料的型態，需使用半形冒號加資料型態，除了控制資料輸出的位置外，其他所有格式化條件都要使用冒號。"
        },
        {
            "type": "code",
            "content": "```\n'{:資料型態}'.format(資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> n1, n2 = 100, 120\n>>> '今天的零用錢有{:f}元，明天的零用錢有{:f}元'.format(n1, n2)\n'今天的零用錢有100.000000元，明天的零用錢有120.000000元'\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>控制浮點數的小數位數</h5>"
        },
        {
            "type": "text",
            "content": "要控制小數位數可以在冒號後加上小數點，在小數點後填入位數，若小數點後沒有填入位數則輸出的小數位數為0。"
        },
        {
            "type": "code",
            "content": "```\n'{:.小數位數f}'.format(資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> a = 1.23456 #原本的小數位數為5\n>>> '{:.1f}, {:.2f}, {:.3f}'.format(a, a, a)\n'1.2, 1.23, 1.235'\n>>> b = 123 #原本的小數位數為0\n>>> '{:.1f}, {:.2f}, {:.3f}'.format(b, b, b)\n'123.0, 123.00, 123.000'\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>控制資料的欄寬</h5>"
        },
        {
            "type": "code",
            "content": "```\n'{:欄寬}'.format(資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> '{:5}'.format(1)\n'    1'\n>>> '{:5}'.format(12)\n'   12'\n>>> '{:5}'.format(123)\n'  123'\n>>> '{:5}'.format(1234)\n' 1234'\n>>> '{:5}'.format(12345)\n'12345'\n```"
        },
        {
            "type": "text",
            "content": "以上功能與使用%格式化字元的效果是相同的。"
        },
        {
            "type": "subtitle",
            "content": "<h5>控制資料的對齊方式</h5>"
        },
        {
            "type": "text",
            "content": "在上例中設定欄寬時我們會發現，數字都出現在右邊，我們可以改變資料的對齊方式。"
        },
        {
            "type": "code",
            "content": "```\n'{:對齊字元欄寬}'.format(資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> '{:>5}'.format('★') #靠右\n'    ★'\n>>> '{:^5}'.format('★') #置中\n'  ★  '\n>>> '{:<5}'.format('★') #靠左\n'★    '\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>控制空格處填入的字元</h5>"
        },
        {
            "type": "text",
            "content": "空格處是指設定欄寬後多出的空格，我們可以選擇填入的字元。"
        },
        {
            "type": "code",
            "content": "```\n'{:填入字元對齊字元欄寬}'.format(資料)\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> '{:0>5}'.format('★') #填入0\n'0000★'\n>>> '{:->5}'.format('★') #填入-\n'----★'\n>>> '{:♥>5}'.format('★') #填入♥\n'♥♥♥♥★'\n```"
        },
        {
            "type": "subtitle",
            "content": "<h5>格式化語法</h5>"
        },
        {
            "type": "code",
            "content": "```\n'{指定位置:填入字元對齊字元欄寬資料型態}'.format(資料)\n```"
        },
        {
            "type": "title",
            "content": "<h4>format()函式</h4>"
        },
        {
            "type": "code",
            "content": "```\nformat(資料, '格式化字串') #使用方式\nformat(資料, '填入字元對齊字元欄寬資料型態') #格式化字串的語法\n```"
        },
        {
            "type": "text",
            "content": "format()用於格式化一個資料，不用輸入大括號與冒號，其他格式化操作與字串.format()相同。"
        },
        {
            "type": "code",
            "content": "```python=\n>>> format('★', '=>10s')\n'=========★'\n>>> format('★', '=^10s')\n'====★====='\n>>> format('★', '=<10s')\n'★========='\n```"
        }
    ],
    "answer_block": [
        {
            "type": "text",
            "content": "執行結果："
        },
        {
            "type": "code",
            "content": "```\n    3.14\n```"
        },
        {
            "type": "text",
            "content": "請填入正確的格式化字串，輸出格式：欄寬為8並向右靠齊，輸出pi至小數點第二位。"
        },
        {
            "type": "code",
            "content": "```python=\npi = 3.14159265359\nprint(format(pi, '_____'))\n```"
        },
        {
            "type": "text",
            "content": "答案：>8.2f"
        }
    ]
}