{
    "course_info": {
        "lesson_number": "5",
        "chapter": "6",
        "name": " 生成式 Comprehensions"
    },
    "course_block": [
        {
            "type": "text",
            "content": "<style>"
        },
        {
            "type": "text",
            "content": "h4{"
        },
        {
            "type": "text",
            "content": "color:purple"
        },
        {
            "type": "text",
            "content": "}"
        },
        {
            "type": "text",
            "content": "h5{"
        },
        {
            "type": "text",
            "content": "color:darkblue"
        },
        {
            "type": "text",
            "content": "}"
        },
        {
            "type": "text",
            "content": "</style>"
        },
        {
            "type": "text",
            "content": "##### 串列生成式 List Comprehensions"
        },
        {
            "type": "text",
            "content": "串列生成式是一個可以簡單用來創建串列的生成式，用來生成有特定規則或是數值的串列。"
        },
        {
            "type": "code",
            "content": "```\n[運算式 for 變數名稱 in 容器]\n```"
        },
        {
            "type": "text",
            "content": "如果想要調整成績，以之前學會的方法是用迴圈跑遍舊的分數，並在回圈內產生新的"
        },
        {
            "type": "text",
            "content": "原本的分數乘於0.6再加上30分，其中一種方法是用for迴圈:"
        },
        {
            "type": "code",
            "content": "```python=\nnew_score=[]\nfor i in score:\n\tnew_score.append(i*0.6+30)\n```"
        },
        {
            "type": "text",
            "content": "另一種就是用串列生成式，只需一行就能解決。"
        },
        {
            "type": "code",
            "content": "```python=\nnew_score=[i*0.6+30 for i in score]\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> [ () for _ in range(10) ]\n[(), (), (), (), (), (), (), (), (), ()]\n```"
        },
        {
            "type": "text",
            "content": "還可以運用變數讓元素產生變化"
        },
        {
            "type": "code",
            "content": "```python=\n>>> [i**2 for i in range(1,10)]\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n>>> [str(i) for i in range(1,10)]\n['1', '2', '3', '4', '5', '6', '7', '8', '9']\n```"
        },
        {
            "type": "text",
            "content": "後面還可以接上if的判斷，也沒有限定只能用一個for迴圈。"
        },
        {
            "type": "code",
            "content": "```\n[要丟進去的東西 for 變數名稱 in 容器 if 條件]\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> [i for i in range(1,10) if i%2==0]\n[2, 4, 6, 8]\n>>> [a+b for a in 'abc' for b in '123']\n['a1', 'a2', 'a3', 'b1', 'b2', 'b3', 'c1', 'c2', 'c3']     #使用两层循环，可以生成全排列(?????\n>>> dt = {1:'Mary',2:'Tom',3:'Jenny'}\n>>> [str(k) + '號:' + v for k, v in dt.items()]    #字典\n['1號:Mary', '2號:Tom', '3號:Jenny']\n```"
        },
        {
            "type": "text",
            "content": "##### 集合生成式 set comprehensions"
        },
        {
            "type": "text",
            "content": "集合生成式跟串列生程式一樣，差別只在於把中括號換成了大括號，橙橙的洞悉則變成了集合。"
        },
        {
            "type": "code",
            "content": "```\n{要生成的元素 for 變數名稱 in 容器 }\n{要生成的元素 for 變數名稱 in 容器 if 條件}\n```"
        },
        {
            "type": "code",
            "content": "```python=\n>>> {i for i in range(1,10) if i%2==0}\n{8, 2, 4, 6}\n>>> [a+b for a in 'abc' for b in '123']\n{'a3', 'b3', 'a2', 'b2', 'c1', 'b1', 'c3', 'a1', 'c2'}     #使用两层循环，可以生成全排列(?????\n>>> dt = {1:'Mary',2:'Tom',3:'Jenny'}\n>>> [str(k) + '號:' + v for k, v in dt.items()]    #字典\n['1號:Mary', '2號:Tom', '3號:Jenny']\n```"
        },
        {
            "type": "text",
            "content": "##### 字典生成式 dict comprehensions"
        },
        {
            "type": "text",
            "content": "字典生成式用來快速的生成字典，跟集合生成式一樣是用大括號。不同的是，字典有分值跟鍵，所以前面必須用冒號來區分值跟鍵。"
        },
        {
            "type": "code",
            "content": "```\n{鍵運算式:值運算式 for 變數名稱 in 容器}\n{鍵運算式:值運算式 for 變數名稱 in 容器 if 條件}\n```"
        },
        {
            "type": "text",
            "content": "可以配合if用來篩選字典內的元素。"
        },
        {
            "type": "code",
            "content": "```python=\n>>> dt={1: 24, 2: 86, 3: 44, 4: 79, 5: 100, 6: 56, 7: 97, 8: 59, 9: 88, 10: 10}\n>>> {k:v for k,v in dt.items() if v>59}    #挑出有及格的\n{2: 86, 4: 79, 5: 100, 7: 97, 9: 88}\n```"
        },
        {
            "type": "text",
            "content": "也可以用來快速的調換值與鍵。"
        },
        {
            "type": "code",
            "content": "```python=\n>>> My_dict = {1:'Mary',2:'Tom',3:'Jenny'}\n>>> {v:k for k,v in My_dict.items()}\n{'Mary': 1, 'Tom': 2, 'Jenny': 3}\n```"
        }
    ],
    "answer_block": [
        {
            "type": "text",
            "content": "執行結果："
        },
        {
            "type": "code",
            "content": "```python=\n>>> poker['A'] < poker['5']\nTrue\n>>> poker['J'] < poker['5']\nFalse\n```"
        },
        {
            "type": "text",
            "content": "完成以下程式碼使輸出結果與題目相同："
        },
        {
            "type": "code",
            "content": "```python=\npoker = _str(_):i for i in range(2, 10)_\npoker['A'] = 1\npoker['J'] = 10\npoker['Q'] = 11\npoker['K'] = 12\n```"
        }
    ]
}